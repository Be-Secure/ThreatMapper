/* eslint-disable arrow-body-style */
import React, { useCallback, useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import classNames from 'classnames';
import { DetailModal } from '../common/detail-modal';
import { DetailModalHeader } from '../common/detail-modal/header';
import { KeyValuePairTable } from '../common/detail-modal/key-value-pair-table';
import { getUserRole } from "../../helpers/auth-helper";
import { excludeKeys } from '../../utils/array-utils';
import { JSONView } from '../common/detail-modal/json-view';
import NotificationToaster from '../common/notification-toaster/notification-toaster';
import styles from './vulnerability-detail-modal.module.scss';
import { getDocTopAttackPathsAction, toaster } from "../../actions/app-actions";
import { DagreGraph, formatApiDataForDagreGraph } from '../common/dagre-graph';

function manipulateTableResponse(responseData) {
  const userRole = getUserRole();
  const fieldsToBeHidden = ['type', 'resolved', 'signature_id', '@version', 'cve_overall_score'];
  if (userRole !== 'admin') {
    fieldsToBeHidden.push('payload_printable');
  }
  const response = {
    ...responseData,
    _source: excludeKeys(responseData._source, fieldsToBeHidden),
  };
  return response;
}

function manipulateJSONResponse(responseData) {
  const userRole = getUserRole();
  const fieldsToBeHidden = ['type', 'resolved', 'signature_id', 'cve_overall_score'];
  if (userRole !== 'admin') {
    fieldsToBeHidden.push('payload_printable');
  }
  const response = {
    ...responseData,
    _source: excludeKeys(responseData._source, fieldsToBeHidden),
  };
  return response._source;
}

export const VulnerabilityDetailsModal = ({ cveData, onRequestClose }) => {
  const [selectedTabId, setSelectedTabId] = useState('table');
  const topAttackPathsForDoc = useSelector((state) => state.getIn(['topAttackPathsForDoc', 'data']));
  const topAttackPathsForDocLoading = useSelector((state) => state.getIn(['topAttackPathsForDoc', 'status', 'loading']));
  const isToasterVisible = useSelector((state) => state.get('isToasterVisible'));
  const dispatch = useDispatch();

  const nodeType = cveData?._source?.node_type;
  const docId = cveData?._source?.doc_id;
  const type = cveData?._source?.type;
  const doc = cveData?._source;

  const copyToClipboard = useCallback(() => {
    navigator?.clipboard?.writeText(JSON.stringify(doc)).then(() => {
      dispatch(toaster('JSON copied to clipboard'));
    }).catch((error) => {
      console.log(error);
      dispatch(toaster('ERROR: There was an error copying to the clipboard'));
    });
  }, []);

  useEffect(() => {
    if (['container_image', 'host'].includes(nodeType)) {
      dispatch(getDocTopAttackPathsAction({
        docId
      }));
    }
  }, []);

  const showAttackPath = (type === 'cve')
    && ['container_image', 'host'].includes(nodeType)
    && !topAttackPathsForDocLoading;


  const attackPathDataExist =
    topAttackPathsForDoc
    && topAttackPathsForDoc.attack_path
    && topAttackPathsForDoc.attack_path.length

  return (
    <DetailModal isOpen onRequestClose={onRequestClose}>
      <DetailModalHeader
        tabs={[{
          text: "table",
          id: "table",
          onClick: () => {
            setSelectedTabId("table");
          }
        }, {
          text: "json",
          id: "json",
          onClick: () => {
            setSelectedTabId("json");
          }
        }]}
        selectedTabId={selectedTabId}
        onRequestClose={onRequestClose}
        actions={
          <button
            type="button"
            className="primary-btn"
            onClick={copyToClipboard}
            title="Copy to clipboard"
          >
            <i className="fa fa-copy" />
            Copy
          </button>
        }
      />
      <div className={styles.modalContentWrapper}>
        <div className={classNames(styles.tabsDataContainer, {
          [styles.withAttackPath]: showAttackPath
        })}>
          {
            selectedTabId === "table" ? (
              <KeyValuePairTable data={manipulateTableResponse(cveData)} />
            ) : (
              <JSONView data={manipulateJSONResponse(cveData)} />
            )
          }
        </div>
        {
          showAttackPath ? (
            <div className={styles.attackPathContainer}>
              <div className={styles.attackPathTitle}>Top 5 Attack Paths</div>
              {
                attackPathDataExist ? (
                  <DagreGraph
                    data={formatApiDataForDagreGraph(topAttackPathsForDoc)}
                    height={500}
                  />
                ) : (
                  <div className={styles.attackPathNoData}>No attack paths exist</div>
                )
              }
            </div>
          ) : null
        }
      </div>
      {isToasterVisible && <NotificationToaster />}
    </DetailModal>
  );
}
